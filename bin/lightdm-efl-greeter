#!/usr/bin/env python
# encoding: utf-8
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#



import os
import sys

import logging
elog = logging.getLogger("efl")
elog_handler = logging.StreamHandler(sys.stderr)
elog_formatter = logging.Formatter("[%(levelname)s] %(filename)s:%(lineno)d   %(message)s")
elog_handler.setFormatter(elog_formatter)
elog.addHandler(elog_handler)
elog.setLevel(logging.DEBUG)
elog.info("efl logging initialized")

from efl import ecore
from efl import ecore_x
from efl import edje
from efl import elementary
from efl.elementary.layout import Layout
from efl.elementary.list import List, ListItem
from efl.elementary.entry import Entry
from efl.elementary.menu import Menu
from efl.elementary.image import Image
from efl.elementary.icon import Icon
from efl.elementary.window import StandardWindow
from efl.elementary.check import Check
from efl.evas import EXPAND_BOTH
import gi
gi.require_version('LightDM','1')
from gi.repository import LightDM

# install the _() and ngettext() functions in the main namespace
install_prefix = os.path.dirname(os.path.dirname(__file__))
# locale_dir = os.path.join(install_prefix, 'share', 'locale')
# gettext.install('enter', names='ngettext', localedir=locale_dir)

theme = 'default.edj'
theme_file = os.path.join(install_prefix, 'share', 'lightdm-efl-greeter', 'themes', theme)


class MainWin(StandardWindow):
    def __init__(self, app, show_users=False):
        self.app = app
        self.show_users = show_users

        # window setup
        StandardWindow.__init__(self, 'lightdm-efl-greeter', 'Enter',
                                autodel=True, size=(600,400),
                                cursor='arrow')
        self.callback_delete_request_add(lambda o: elementary.exit())

        # make the window fullscreen (without a wm)
        x, y, w, h = self.screen_size
        self.size = (w, h)

        # edje layout (theme)
        self.layout = Layout(self, file=(theme_file, 'enter/main'),
                             size_hint_weight=EXPAND_BOTH)
        self.layout.signal_callback_add('sessions,show', '',
                                        self._sig_sessions_show)
        self.layout.signal_callback_add('powers,show', '',
                                        self._sig_powers_show)
        self.layout.signal_callback_add('langs,show', '',
                                        self._sig_langs_show)
        self.resize_object_add(self.layout)
        self.layout.show()

        # setup the edje theme and show the win
        self.theme_setup()
        self.show()

        # give focus to the window (without a wm)
        ecore_x_win = ecore_x.Window_from_xid(self.xwindow_xid)
        ecore_x_win.focus()
        id = ecore_x.cursor_shape_get(2)
        ecore_x_win.cursor_set(id)
        ecore_x.cursor_free(id)
        ecore_x_win.cursor_show()
        self.username_entry.focus = True


    def theme_setup(self):
        # username entry
        en = self.layout.edje.part_external_object_get('username.entry')
        en.callback_activated_add(self._username_en_activated_cb)
        en.part_text_set('guide', 'Username')
        self.username_entry = en

        # prompt entry
        en = self.layout.edje.part_external_object_get('prompt.entry')
        en.callback_activated_add(self._prompt_en_activated_cb)
        self.prompt_entry = en

        # language label
        self.layout.part_text_set('lang.text', self.app.selected_lang.props.name)

        # message entry
        en = self.layout.edje.part_external_object_get('message.entry')
        en.callback_activated_add(self.message_show)
        self.message_entry = en

        # populate users list
        if self.show_users and self.layout.edje.part_exists('userslist.box'):
            for u in LightDM.UserList().get_users():
                #
                # A user instance has these attributes:
                # - 'background' (string)
                # - 'common_user' (non-readable object)
                # - 'display_name' (string)
                # - 'has_messages' (bool)
                # - 'home_directory' (string)
                # - 'image' (string)
                # - 'language' (string)
                # - 'layout' (keyboard layout)(string)
                # - 'layouts' (keyboard layouts)(list of strings)
                # - 'logged_in' (bool)
                # - 'name' (string)
                # - 'real_name' (string)
                # - 'session' (string)
                # - 'uid' (string)
                #

                ul = Layout(self, file=(theme_file, 'enter/user'))

                ul.signal_callback_add('user,selected', '',
                                       self._sig_user_selected, u.props.name)

                ul.part_text_set('user.name.text', u.props.name)

                if os.path.exists(u.props.image):
                    im = Image(ul, file=u.props.image)
                else:
                    im = Image(ul, file=(theme_file, 'enter/default_face'))
                ul.part_content_set('user.image.swallow', im)

                # Optional parts
                edj = ul.edje
                if edj.part_exists('user.opt.background.swallow'):
                    if os.path.exists(u.props.background):
                        im = Image(ul, file=u.props.background)
                    else:
                        pass
                        # TODO: Default background?
                        #im = Image(ul, file=(theme_file, 'default/default_background'))
                    ul.part_content_set('user.opt.background.swallow', im)

                if edj.part_exists('user.opt.display_name.text'):
                    ul.part_text_set('user.opt.display_name.text', u.props.display_name)

                if edj.part_exists('user.opt.has_messages.swallow'):
                    swallow = Check(ul, state=u.props.has_messages)
                    ul.part_content_set('user.opt.has_messages.swallow', swallow)

                if edj.part_exists('user.opt.home_directory.text'):
                    ul.part_text_set('user.opt.home_directory.text', u.props.home_directory)

                if edj.part_exists('user.opt.language.text'):
                    ul.part_text_set('user.opt.language.text', u.props.language)

                if edj.part_exists('user.opt.layout.text'):
                    ul.part_text_set('user.opt.layout.text', u.props.layout)

                if edj.part_exists('user.opt.layouts.swallow'):
                    swallow = List(ul)
                    for lang in u.props.layouts:
                        ListItem(lang).append_to(swallow)
                    swallow.go()
                    ul.part_content_set('user.opt.layouts.swallow', swallow)

                if edj.part_exists('user.opt.logged_in.swallow'):
                    swallow = Check(ul, state=u.props.logged_in)
                    ul.part_content_set('user.opt.logged_in.swallow', swallow)

                if edj.part_exists('user.opt.real_name.text'):
                    ul.part_text_set('user.opt.real_name.text', u.props.real_name)

                if edj.part_exists('user.opt.session.text'):
                    ul.part_text_set('user.opt.session.text', u.props.session)

                if edj.part_exists('user.opt.uid.text'):
                    ul.part_text_set('user.opt.uid.text', u.props.uid)

                self.layout.box_append('userslist.box', ul)
                ul.show()
            self.layout.signal_emit('userslist,show', '')

    def _sig_user_selected(self, obj, emission, source, username):
        """ Signal from the theme: an avatar has been selected """
        self.username_entry.text = username
        self.app.user_selected(username)

    def hide(self, hide_done_cb):
        self.layout.signal_emit('ui,hide', '')
        self.layout.signal_callback_add('ui,hide,done', '',
                                        lambda o,e,s: hide_done_cb())

    # hostname
    def hostname_set(self, hostname):
        self.layout.part_text_set('hostname.text', hostname)

    # sessions
    def _sig_sessions_show(self, ly, signal, source):
        """ Signal from the theme to show the sessions menu """
        m = Menu(self)
        for key, session in list(app.sessions.items()):
            m.item_add(None, session.props.name, None,
                       self._session_clicked_cb, session)

        x, y = self.evas.pointer_canvas_xy_get()
        m.move(x, y)
        m.show()

    def _session_clicked_cb(self, menu, item, session):
        self.app.selected_session = session.props.key
        self.select_session(session)

    def select_session(self, session=None):
        """ Mark the given Session as selected """
        if session:
            self.layout.part_text_set('session.text', session.props.name)
            self.layout.part_text_set('session.info', session.props.comment)
            icon_group = self.search_group_for_session(session.props.key)
            if icon_group:
                ic = self.layout.edje.part_external_object_get('session.icon')
                ic.file = (theme_file, icon_group)
        else:
            self.layout.part_text_set('session.text', "Click to select session")
            # TODO: Clear the icon

    def search_group_for_session(self, session_key):
        # try the exact session name
        group = 'enter/session/' + session_key
        if edje.file_group_exists(theme_file, group):
            return group

        # or search a group that start with the session name
        for group in edje.file_collection_list(theme_file):
            if group.startswith('enter/session/'):
                if group.split('/')[2].startswith(session_key):
                    return group

        # some fixed fallback (for derivate works?)
        # @davemds: Why we need this?
        if session_key.startswith(('cinnamon', )):
            group = 'enter/session/gnome'
            if edje.file_group_exists(theme_file, group):
                return group

        # give up
        group = 'enter/session/unknown'
        if edje.file_group_exists(theme_file, group):
            return group

    # powers
    def _sig_powers_show(self, ly, signal, source):
        """ Signal from the theme to show the powers menu """
        m = Menu(self)
        it = m.item_add(None, 'Shutdown', None, lambda m,i: LightDM.shutdown())
        it.disabled = not LightDM.get_can_shutdown()
        it = m.item_add(None, 'Restart', None, lambda m,i: LightDM.restart())
        it.disabled = not LightDM.get_can_restart()
        it = m.item_add(None, 'Suspend', None, lambda m,i: LightDM.suspend())
        it.disabled = not LightDM.get_can_suspend()
        it = m.item_add(None, 'Hibernate', None, lambda m,i: LightDM.hibernate())
        it.disabled = not LightDM.get_can_hibernate()

        x, y = self.evas.pointer_canvas_xy_get()
        m.move(x, y)
        m.show()

    # langs
    def _sig_langs_show(self, ly, signal, source):
        """ Signal from the theme to show the languages menu """
        m = Menu(self)
        for code, lang in list(app.languages.items()):
            txt = '{} - {}'.format(lang.props.name, lang.props.territory)
            icon = 'arrow-right' if lang == self.app.selected_lang else None
            m.item_add(None, txt, icon, self._lang_clicked_cb, lang)

        x, y = self.evas.pointer_canvas_xy_get()
        m.move(x, y)
        m.show()

    def _lang_clicked_cb(self, menu, item, lang):
        self.app.selected_lang = lang.props.code
        self.layout.part_text_set('lang.text', lang.props.name)

    # username entry
    def _username_en_activated_cb(self, en):
        self.app.user_selected(en.text)

    def _prompt_en_activated_cb(self, en):
        self.app.prompt_response(en.text)

    # password/prompt entry
    def prompt_show(self, text='', password=False):
        self.layout.signal_emit('prompt,show', '')
        self.prompt_entry.password = password
        self.prompt_entry.part_text_set('guide', text)
        self.prompt_entry.focus = True

    def prompt_hide(self):
        self.layout.signal_emit('prompt,hide', '')
        self.username_entry.focus = True

    def message_show(self, msg):
        # self.layout.part_text_set('message.text', msg)
        self.message_entry.entry_append(msg + "<br>")

    def log(self, msg):
        print("LOG:"+str(msg), file=sys.stderr)
        self.layout.part_text_set('debug.text', str(msg))


class EnterApplication(object):
    def __init__(self):
        # LightDM greeter
        self.greeter = LightDM.Greeter()
        self.greeter.connect('authentication-complete',
                             self.greeter_authentication_complete_cb)
        self.greeter.connect('show-message', self.greeter_show_message_cb)
        self.greeter.connect('show-prompt', self.greeter_show_prompt_cb)
        self.greeter.connect_to_daemon_sync()

        # get sessions from the greeter
        self.sessions = dict() # key: session_key  data: Session instance
        for session in LightDM.get_sessions():
            self.sessions[session.props.key] = session
        self.selected_session = None

        # get available languages
        self.languages = dict() # key: lang_code  data: Language instance
        for lang in LightDM.get_languages():
            self.languages[lang.props.code] = lang
        self.selected_lang = LightDM.get_language()


        # main window
        self.main_win = MainWin(self, not self.greeter.get_hide_users_hint())
        self.log('debug label') # TODO removeme
        self.main_win.message_show('message label') # TODO removeme

        # set hostname in the gui
        self.main_win.hostname_set(LightDM.get_hostname())

    def log(self, msg):
        self.main_win.log(msg)

    def user_selected(self, username):
        # select the session for the user
        users_list = LightDM.UserList()
        user = users_list.get_user_by_name(username)
        if not user:
            # TODO: display an error
            return

        user_session = user.get_session()
        if user_session is None:
            user_session = self.greeter.get_default_session_hint()
        if user_session not in self.sessions:
            user_session = None
        if user_session:
            self.main_win.select_session(self.sessions[user_session])
        else:
            self.main_win.select_session()

        # start user auth process
        self.greeter.authenticate(username)

    def prompt_response(self, response):
        self.main_win.prompt_hide()
        self.main_win.message_show('Login in progress...')
        self.greeter.respond(response)

    def greeter_show_prompt_cb(self, greeter, text, promptType):
        """ called by LDM when need a prompt """
        if promptType == LightDM.PromptType.SECRET:
            self.main_win.prompt_show(text, password=True)
        else:
            self.main_win.prompt_show(text, password=False)

    def greeter_show_message_cb(self, greeter, text, message_type):
        """ called by LDM when we must show a message """
        self.main_win.message_show(text)

    def greeter_authentication_complete_cb(self, greeter):
        """ called by LDM when auth is completed """
        if self.greeter.get_is_authenticated():
            self.greeter.set_language(self.selected_lang.props.code)
            self.main_win.hide(
                lambda: self.greeter.start_session_sync(self.selected_session))
        else:
            self.main_win.message_show('Login failed')


if __name__ == '__main__':
    elementary.init()
    app = EnterApplication()
    ecore.main_loop_glib_integrate()
    elementary.run()
    elementary.shutdown()
    logging.shutdown()
